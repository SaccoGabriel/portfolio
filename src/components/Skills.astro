---

import { Icon } from 'astro-icon/components'
import '../styles/header.css'
import '../styles/global.css'


interface Props {
	file:string;
}

const { file } = Astro.props;

---

<section id = "skills" class = "skills">
    <p class = "title">Skills</p>
    <div class="test">
        <div class = "programming">
            <p style="font-weight: bolder; color:var(--low-contrast-text);">Programming langages</p>
            <ul>
                <p><Icon class="icon" name={"mdi:language-python"}/> Python</p>
                <p><Icon class="icon" name={"mdi:language-csharp"}/> Windows Form</p>
                <p><Icon class="icon" name={"mdi:language-javascript"}/> JavaScript</p>
            </ul>
        </div>
       <div class = "framework">
        <p style="font-weight: bolder; color:var(--low-contrast-text);">Framework</p>
            <ul>
                <p><Icon class="icon" name={"mdi:language-python"}/> Python</p>
                <p><Icon class="icon" name={"mdi:language-csharp"}/> Windows Form</p>
                <p><Icon class="icon" name={"mdi:language-javascript"}/> JavaScript</p>
            </ul>
        </div>
        <div class = "database">
            <p style="font-weight: bolder; color:var(--low-contrast-text);">Database</p>
            <ul>
                <p><Icon class="icon" name={"mdi:language-python"}/> Python</p>
                <p><Icon class="icon" name={"mdi:language-csharp"}/> Windows Form</p>
                <p><Icon class="icon" name={"mdi:language-javascript"}/> JavaScript</p>
            </ul>
        </div>
        <div class = "others">
            <p style="font-weight: bolder; color:var(--low-contrast-text);">Others</p>
            <ul>
                <p><Icon class="icon" name={"mdi:language-python"}/> Python</p>
                <p><Icon class="icon" name={"mdi:language-csharp"}/> Windows Form</p>
                <p><Icon class="icon" name={"mdi:language-javascript"}/> JavaScript</p>
            </ul>
        </div>
    </div>
</section>


<script>
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.intersectionRatio>=0.5) {
      entry.target.classList.add('visible')
    } else {
      entry.target.classList.remove('visible')
    }
  })
}, {
  threshold: [0.5]
})

const hiddenElement = document.querySelectorAll('.skills')
hiddenElement.forEach(el => observer.observe(el))

</script>

</script>
<style>

ul{
    padding-left: 1.4rem;
}
    .icon{
        position: relative;
        top:2px;
    }
    .test{
        position: relative;
        display: flex; /* Utilisation de flexbox pour centrer verticalement */
        align-items: center; /* Aligner les éléments verticalement au centre */
        display: flex;
        flex-wrap: wrap;
    }

    .title{
        font-weight: bolder;
        text-align: center; /* Aligner le texte au centre horizontalement */
        position: relative;

    }

    .skills
    {
        position: relative;
        font-family: 'Ledger';
        top:150px;
        color:var(--low-contrast-text);
        margin-right: 10%;
        margin-left: 10%;
    

        opacity: 0; /* Texte invisible par défaut */
        transition: opacity 0.3s ease; /* Transition de l'opacité */
  }

  .skills.visible{
    opacity: 1; /* Texte visible lorsque la classe 'visible' est appliquée */
  }

    .programming
    {
        color:var(--high-contrast-text);
        position: relative;
        margin-left: 4%;
        padding:10px;
        font-size: 20px;
        
    }

    .framework
    {
        color:var(--high-contrast-text);

        position: relative;
        margin-left: 10%;
        font-size: 20px;

        
    }

    .database
    {
        color:var(--high-contrast-text);
        position: relative;
        margin-left: 10%;
        font-size: 20px; 
    }


    .others
    {
        color:var(--high-contrast-text);
        position: relative;
        margin-left: 10%;
        font-size: 20px; 
    }
    
</style>